version: '3.8'

services:
  # Banco de Dados PostgreSQL
  postgres:
    image: postgres:15
    container_name: quantumbet-postgres
    environment:
      POSTGRES_DB: quantumbet_db
      POSTGRES_USER: quantumbet
      POSTGRES_PASSWORD: password123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - quantumbet-network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: quantumbet-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - quantumbet-network

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: quantumbet-backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://quantumbet:password123@postgres:5432/quantumbet_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-super-secret-key-here
      - API_FOOTBALL_KEY=${API_FOOTBALL_KEY}
      - PANDASCORE_KEY=${PANDASCORE_KEY}
      - ODDS_API_KEY=${ODDS_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - MERCADOPAGO_ACCESS_TOKEN=${MERCADOPAGO_ACCESS_TOKEN}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - ./models:/app/models
      - ./data:/app/data
    networks:
      - quantumbet-network
    restart: unless-stopped

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: quantumbet-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - quantumbet-network
    restart: unless-stopped

  # Worker Celery para tarefas ass√≠ncronas
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: quantumbet-celery
    command: celery -A app.core.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://quantumbet:password123@postgres:5432/quantumbet_db
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
      - API_FOOTBALL_KEY=${API_FOOTBALL_KEY}
      - PANDASCORE_KEY=${PANDASCORE_KEY}
      - ODDS_API_KEY=${ODDS_API_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - ./models:/app/models
      - ./data:/app/data
    networks:
      - quantumbet-network
    restart: unless-stopped

  # Scheduler Celery Beat
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: quantumbet-scheduler
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://quantumbet:password123@postgres:5432/quantumbet_db
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
    networks:
      - quantumbet-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: quantumbet-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - quantumbet-network
    restart: unless-stopped

  # Monitoring - Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: quantumbet-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - quantumbet-network
    restart: unless-stopped

  # Monitoring - Grafana (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: quantumbet-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - quantumbet-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  quantumbet-network:
    driver: bridge 